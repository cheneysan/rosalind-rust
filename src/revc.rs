/*
Complementing a Strand of DNA
https://rosalind.info/problems/revc/
*/

fn complement(dna: &str) -> Result<String, String> {
    let mut comp = String::new();
    for nucleotide in dna.chars().rev() {
        let next = match nucleotide {
            'A' => Ok('T'),
            'C' => Ok('G'),
            'G' => Ok('C'),
            'T' => Ok('A'),
            c => Err(format!("invalid nucleotide: '{}'", c))
        };

        comp.push(next?);
    }
    Ok(comp)
}

#[cfg(test)]
mod tests {
    use crate::revc::complement;

    #[test]
    fn it_works() {
        let sample = "AAAACCCGGT";
        let expected = "ACCGGGTTTT";
        assert_eq!(expected, complement(sample).unwrap());
    }

    #[test]
    fn nice_error() {
        let sample = "AAAAB";
        assert_eq!("invalid nucleotide: 'B'", complement(sample).err().unwrap());
    }

    #[test]
    fn actual_dataset() {
        let dna = "GGTTTTGCCGTTAGGCATGGAGTACCCGAGGACTTGACTGCTAAACCGACAACCGTTTCACCGGTACACCGACCGCTGGTTGTAACGCAGGCCCTTATACCGCTAGAGCTGAGATGCAGCAACTTCGGTTCTCCAGGGGTCCCTTTACACCATATGGACTAGACATCTAATATCTGTTTGGAGAGGTCAAGGGCGACCCGTTACATCCTCGGGACGGCTACCTCAAGGACGGCAGGTTTCAGTGTGCTGCCGAGCGAACATGTAACAGAACGCAAATGGAATGGCTTGAGTCGGAGTGCCCGCACCGCTCCGACCATTCTCGGGGCACAAGAGAAGGGCTTTCCTTATGGTCTAGTGTTGCCTGATTAGTCCTCGTGAGTAACAACCACCGCTTCTTACGAACCCGCTGATACGTTCCGCGGGAGGCGGGCGCGGTTGATGGCTGCGTCGGCTGCGGGGAGCGGGGTGGCCAGTACGTTTGTACCTCTACACATGTTGTATTGCACATCATTCAGGGTAATGTGTATTCCCAACGGTAGCTTCGCAGAACATGCGGAGCGTCTGCGAGTCGCGTCTGAGTTGCTCTATCCCCGAATCGATCGATTTGAAATTGCGCTAGCGTAACATGCGACTATGAGTTTTCCAATCTGGCTGCTATAGAAGAGTGCCCTTCTCCGTCCACGGCCTTCCAGCCCTTTTTGGGTGGTCGGCGTCACACAGCCTGGGAGTGTATCTAGCATGGCCCACTTGTGACCAGACGGCGAACGGCGTCCGCATCTGAAACGTCGATGCAATTTCGTACAAGACGGCGCAGCGGCCCTGTGATCTCAGGAACCGGTACTTTACTCTTATACGGCGCCATGTTTCGGAAATGTCTAGTGTTCGATTGTATTGGCGTATGCTTGCACAGATTAAGGGGAGGCAGCCCAGACT";
        println!("{}", complement(dna).unwrap());
        // Correct answer:
        // AGTCTGGGCTGCCTCCCCTTAATCTGTGCAAGCATACGCCAATACAATCGAACACTAGACATTTCCGAAACATGGCGCCGTATAAGAGTAAAGTACCGGTTCCTGAGATCACAGGGCCGCTGCGCCGTCTTGTACGAAATTGCATCGACGTTTCAGATGCGGACGCCGTTCGCCGTCTGGTCACAAGTGGGCCATGCTAGATACACTCCCAGGCTGTGTGACGCCGACCACCCAAAAAGGGCTGGAAGGCCGTGGACGGAGAAGGGCACTCTTCTATAGCAGCCAGATTGGAAAACTCATAGTCGCATGTTACGCTAGCGCAATTTCAAATCGATCGATTCGGGGATAGAGCAACTCAGACGCGACTCGCAGACGCTCCGCATGTTCTGCGAAGCTACCGTTGGGAATACACATTACCCTGAATGATGTGCAATACAACATGTGTAGAGGTACAAACGTACTGGCCACCCCGCTCCCCGCAGCCGACGCAGCCATCAACCGCGCCCGCCTCCCGCGGAACGTATCAGCGGGTTCGTAAGAAGCGGTGGTTGTTACTCACGAGGACTAATCAGGCAACACTAGACCATAAGGAAAGCCCTTCTCTTGTGCCCCGAGAATGGTCGGAGCGGTGCGGGCACTCCGACTCAAGCCATTCCATTTGCGTTCTGTTACATGTTCGCTCGGCAGCACACTGAAACCTGCCGTCCTTGAGGTAGCCGTCCCGAGGATGTAACGGGTCGCCCTTGACCTCTCCAAACAGATATTAGATGTCTAGTCCATATGGTGTAAAGGGACCCCTGGAGAACCGAAGTTGCTGCATCTCAGCTCTAGCGGTATAAGGGCCTGCGTTACAACCAGCGGTCGGTGTACCGGTGAAACGGTTGTCGGTTTAGCAGTCAAGTCCTCGGGTACTCCATGCCTAACGGCAAAACC
    }
}